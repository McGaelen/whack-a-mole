//
//  ViewController.swift
//  whack-a-mole
//
//  Created by Gaelen on 4/5/17.
//  Copyright Â© 2017 Gaelen. All rights reserved.
//

import UIKit

class ViewController: UIViewController {
    
    var maxMoles = 5
    let maxtime = 30
    var time = 0
    
    @IBOutlet weak var label: UILabel!
    @IBOutlet weak var molesVisibleLabel: UILabel!
    
    @IBOutlet weak var button0: UIButton!
    @IBOutlet weak var button1: UIButton!
    @IBOutlet weak var button2: UIButton!
    @IBOutlet weak var button3: UIButton!
    @IBOutlet weak var button4: UIButton!
    @IBOutlet weak var button5: UIButton!
    @IBOutlet weak var button6: UIButton!
    @IBOutlet weak var button7: UIButton!
    @IBOutlet weak var button8: UIButton!
    @IBOutlet weak var button9: UIButton!
    @IBOutlet weak var button10: UIButton!
    @IBOutlet weak var button11: UIButton!
    @IBOutlet weak var button12: UIButton!
    @IBOutlet weak var button13: UIButton!
    @IBOutlet weak var button14: UIButton!
    @IBOutlet weak var button15: UIButton!
    
    @IBOutlet weak var molesVisibleSlider: UISlider!
    
    var game: Game?  // The game itself
    var timer: Timer? // The 30 second timer
    var refreshTimer: Timer? // refreshes display periodically
    var buttons = [UIButton]() // Holds all the buttons corresponding to moles

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view
        
        time = maxtime
        maxMoles = Int(molesVisibleSlider.value)
        molesVisibleLabel.text = "Moles visible: \(Int(molesVisibleSlider.value))"
        buttons.append(button0)
        buttons.append(button1)
        buttons.append(button2)
        buttons.append(button3)
        buttons.append(button4)
        buttons.append(button5)
        buttons.append(button6)
        buttons.append(button7)
        buttons.append(button8)
        buttons.append(button9)
        buttons.append(button10)
        buttons.append(button11)
        buttons.append(button12)
        buttons.append(button13)
        buttons.append(button14)
        buttons.append(button15)
    }

    /* This method is generated by Xcode and is intentionally left unimplemented */
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // Called when the value of the slider UI elememnt changes
    @IBAction func adjustNumMoles(_ sender: Any) {
        // Set our internal value to the slider's value, and display it
        maxMoles = Int(molesVisibleSlider.value)
        molesVisibleLabel.text = "Moles visible: \(Int(molesVisibleSlider.value))"
    }
    
    // Called by 30 second timer to decrease the clock, and exit if time is up
    func decreaseTimer(timer: Timer) {
        time -= 1
        label.text = "\(time)"
        if time == 0 {
            stopGameByTimer()
        }
    }
    
    // Called by refresh display timer, which loops through all the moles 
    // and shows the ones that are revealed.
    func checkRevealedMoles(timer: Timer) {
        for i in 0..<game!.moles.count {
            if game!.moles[i].revealed {
                buttons[i].backgroundColor = UIColor.red
            } else {
                buttons[i].backgroundColor = UIColor.clear
            }
            
        }
    }
    
    // Called when the game is stopped by time running out
    func stopGameByTimer() {
        // invalidate() will turn off our timers
        timer?.invalidate()
        refreshTimer?.invalidate()
        game?.stop()
        label.text = "\(game!.molesWhacked) Moles Whacked"
    }
    
    // Start button is pressed
    @IBAction func startGame(_ sender: UIButton) {
        time = maxtime  // reset our game time
        game = Game(numMoles: 16, maxMolesShown: maxMoles) // create a new game
        label.text = "\(time)"
        
        // create our two timers and start
        timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true, block: decreaseTimer)
        refreshTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true, block: checkRevealedMoles)
        game?.start()
    }
    
    // Called when game is stopped by pressing End button
    @IBAction func stopGame(_ sender: UIButton) {
        timer?.invalidate()
        refreshTimer?.invalidate()
        game?.stop()
        label.text = "\(game!.molesWhacked) Moles Whacked"
    }
    
    // Called when any of the Moles are pressed.
    @IBAction func moleWasPressed(_ sender: UIButton) {
        for i in 0..<16 {
            if sender === buttons[i] {
                _ = game?.whack(moleIndex: i)
            }
        }
    }
    
}









